spring:
  application:
    name: gateway-service  # 應用程序的名稱，設定為 gateway-service，用於在 Consul 中註冊並被其他服務識別
  cloud:
    consul:
      host: localhost       # Consul 服務的主機地址，這裡設定為本地主機（localhost）
      port: 8500            # Consul 服務的端口號，預設為 8500
      discovery:
        enabled: true       # 啟用 Consul 服務發現功能，允許 Gateway 註冊到 Consul
        service-name: ${spring.application.name}  # 服務在 Consul 中的名稱，使用 spring.application.name（即 gateway-service）
        health-check-path: /actuator/health  # 健康檢查的路徑，Consul 會定期訪問此端點檢查 Gateway 的狀態
        health-check-interval: 30s           # 健康檢查的間隔時間，每 30 秒檢查一次 Gateway 的健康狀況
    gateway:
      discovery:
        locator:
          enabled: false    # 關閉 Gateway 的動態路由功能（即不根據服務名稱自動生成路由），僅使用手動配置的路由
      routes:              # 定義 Gateway 的路由規則
        - id: consumer-service  # 路由的唯一識別符，方便日誌和監控中識別此路由
          uri: lb://consumer-service  # 目標服務的 URI，使用負載均衡（lb://）並指向 Consul 中註冊的 consumer-service
          predicates:       # 路由的匹配條件
            - Path=/consume/**  # 路徑匹配規則，所有以 /consume/ 開頭的請求都會被此路由處理
#          filters:
#            - StripPrefix=1  # 已註解掉的過濾器，若啟用，會移除路徑中的第一部分（例如 /consume/call 變成 /call）
management:
  endpoints:
    web:
      exposure:
        include: health,info  # 暴露 Spring Boot Actuator 的端點，這裡啟用了 /actuator/health 和 /actuator/info
  tracing:
    sampling:
      probability: 1.0  # 設定追蹤樣本比例，1.0 表示 100% 追蹤所有請求
  zipkin:
    tracing:
      endpoint: http://localhost:9411/api/v2/spans  # Zipkin 的端點，用於接收追蹤資料
server:
  port: 8085              # Gateway 服務運行的端口號，設定為 8085，客戶端通過此端口訪問 Gateway
