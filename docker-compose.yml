services:
  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/bitnami/zookeeper

  kafka:
    image: wurstmeister/kafka:latest
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9093:9093"
    volumes:
      - kafka_data:/kafka
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9093 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  consul:
    image: hashicorp/consul:1.20
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    volumes:
      - consul_data:/consul/data
    command: "agent -server -bootstrap-expect=1 -ui -client=0.0.0.0"
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka-registrar:
    image: alpine:latest
    depends_on:
      kafka:
        condition: service_healthy
      consul:
        condition: service_healthy
    volumes:
      - ./register-kafka.sh:/register-kafka.sh
    command: sh -c "apk add --no-cache curl jq && chmod +x /register-kafka.sh && /register-kafka.sh"
    restart: on-failure

  config-sync:
    image: hashicorp/consul:1.20
    volumes:
      - ./git-repo:/git-repo
      - ./sync-to-consul.sh:/sync-to-consul.sh
    environment:
      - CONSUL_HTTP_ADDR=consul:8500
      - GIT_REPO_URL=https://github.com/m5651535/spring-cloud-configs.git
    command: sh -c "apk add --no-cache git bash curl && if [ ! -d '/git-repo/.git' ]; then git clone $$GIT_REPO_URL /git-repo; fi && tail -f /dev/null"  # 保持容器運行
    depends_on:
      consul:
        condition: service_healthy
    restart: on-failure

  webhook:
    image: python:3.9-slim
    volumes:
      - ./webhook_server.py:/app/webhook_server.py
    command: sh -c "pip install --no-cache-dir flask && python /app/webhook_server.py"
    ports:
      - "8080:8080"
    depends_on:
      - config-sync

  zipkin:
    image: openzipkin/zipkin:latest
    environment:
      STORAGE_TYPE: mem
      KAFKA_BOOTSTRAP_SERVERS: kafka:9093
    ports:
      - "9411:9411"
    depends_on:
      kafka:
        condition: service_healthy

volumes:
  zookeeper_data:
  kafka_data:
  consul_data:
